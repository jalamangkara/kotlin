/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.frontend.fir.differences.miscellaneous

import org.jetbrains.kotlin.test.frontend.fir.differences.diagnosticToSmallClass
import org.jetbrains.kotlin.test.frontend.fir.differences.group
import org.junit.jupiter.api.Test

private val rawTableData = """
    INCOMPATIBLE_MATCHING	MPP
    ERROR_IN_CONTRACT_DESCRIPTION	?
    CLASS_LITERAL_LHS_NOT_A_CLASS	BASIC_SYNTAX
    ANNOTATION_IN_WHERE_CLAUSE_ERROR	BASIC_SYNTAX
    ARGUMENT_PASSED_TWICE	?
    UNDERSCORE_USAGE_WITHOUT_BACKTICKS	BASIC_SYNTAX
    ANNOTATION_PARAMETER_DEFAULT_VALUE_MUST_BE_CONSTANT	BASIC_SYNTAX
    BREAK_OR_CONTINUE_OUTSIDE_A_LOOP	BASIC_SYNTAX
    NOARG_ON_INNER_CLASS_ERROR	?
    NOARG_ON_LOCAL_CLASS_ERROR	?
    ILLEGAL_ESCAPE	BASIC_SYNTAX
    VARARG_OUTSIDE_PARENTHESES	?
    CANNOT_ALL_UNDER_IMPORT_FROM_SINGLETON	BASIC_SYNTAX
    NESTED_CLASS_ACCESSED_VIA_INSTANCE_REFERENCE	BASIC_SYNTAX
    ELSE_MISPLACED_IN_WHEN	BASIC_SYNTAX
    BREAK_OR_CONTINUE_JUMPS_ACROSS_FUNCTION_BOUNDARY	BASIC_SYNTAX
    SYNTAX	BASIC_SYNTAX
    PROPERTY_AS_OPERATOR	BASIC_SYNTAX
    INVALID_CHARACTERS	BASIC_SYNTAX
    OPT_IN_MARKER_CAN_ONLY_BE_USED_AS_ANNOTATION_OR_ARGUMENT_IN_OPT_IN	BASIC_SYNTAX
    INVALID_CHARACTERS_NATIVE_ERROR	BASIC_SYNTAX
    UNSAFE_IMPLICIT_INVOKE_CALL	CALLS_AND_TYPES_EXTRAS
    WRONG_NUMBER_OF_TYPE_ARGUMENTS	CALLS_AND_TYPES_EXTRAS
    RECURSIVE_TYPEALIAS_EXPANSION	CALLS_AND_TYPES_EXTRAS
    UNSAFE_OPERATOR_CALL	CALLS_AND_TYPES_EXTRAS
    CANNOT_CHECK_FOR_ERASED	CALLS_AND_TYPES_EXTRAS
    FUNCTION_CALL_EXPECTED	CALLS_AND_TYPES_EXTRAS
    NO_TYPE_ARGUMENTS_ON_RHS	CALLS_AND_TYPES_EXTRAS
    TYPE_VARIANCE_CONFLICT_IN_EXPANDED_TYPE	CALLS_AND_TYPES_EXTRAS
    CONFLICTING_PROJECTION_IN_TYPEALIAS_EXPANSION	CALLS_AND_TYPES_EXTRAS
    TYPEALIAS_EXPANDS_TO_ARRAY_OF_NOTHINGS	CALLS_AND_TYPES_EXTRAS
    ABBREVIATED_NOTHING_PROPERTY_TYPE	CALLS_AND_TYPES_EXTRAS
    ABBREVIATED_NOTHING_RETURN_TYPE	CALLS_AND_TYPES_EXTRAS
    EXPOSED_TYPEALIAS_EXPANDED_TYPE	CALLS_AND_TYPES_EXTRAS
    CYCLIC_CONSTRUCTOR_DELEGATION_CALL	CALLS_AND_TYPES_EXTRAS
    ABSTRACT_SUPER_CALL	CALLS_AND_TYPES_EXTRAS
    TYPE_ARGUMENTS_NOT_ALLOWED	CALLS_AND_TYPES_EXTRAS
    UNSAFE_INFIX_CALL	CALLS_AND_TYPES_EXTRAS
    USAGE_IS_NOT_INLINABLE	DECLARATION_FEATURES
    INVISIBLE_SETTER	LABELS_BODIES_CONSTRUCTORS_AND_INITIALIZATION
    DECLARATION_CANT_BE_INLINED	DECLARATION_FEATURES
    OPERATOR_MODIFIER_REQUIRED	DECLARATION_FEATURES
    EXPOSED_FUNCTION_RETURN_TYPE	DECLARATION_FEATURES
    PRIVATE_CLASS_MEMBER_FROM_INLINE	DECLARATION_FEATURES
    EXPOSED_PROPERTY_TYPE	DECLARATION_FEATURES
    EXPOSED_PROPERTY_TYPE_IN_CONSTRUCTOR_ERROR	DECLARATION_FEATURES
    REPEATED_MODIFIER	DECLARATION_FEATURES
    INCOMPATIBLE_MODIFIERS	DECLARATION_FEATURES
    INAPPLICABLE_OPERATOR_MODIFIER	DECLARATION_FEATURES
    INAPPLICABLE_LATEINIT_MODIFIER	DECLARATION_FEATURES
    INAPPLICABLE_INFIX_MODIFIER	DECLARATION_FEATURES
    INLINE_PROPERTY_WITH_BACKING_FIELD_DEPRECATION_ERROR	DECLARATION_FEATURES
    NON_PUBLIC_CALL_FROM_PUBLIC_INLINE	DECLARATION_FEATURES
    PROTECTED_CALL_FROM_PUBLIC_INLINE_ERROR	DECLARATION_FEATURES
    RECURSION_IN_INLINE	DECLARATION_FEATURES
    UNSUPPORTED	FORBIDDEN
    DEPRECATION	?
    DEPRECATION_ERROR	?
    API_NOT_AVAILABLE	?
    UNSUPPORTED_FEATURE	FORBIDDEN
    DEPRECATED_PARCELER	?
    NO_RECEIVER_ALLOWED	FORBIDDEN
    CONTRACT_NOT_ALLOWED	BASIC_SYNTAX
    MANY_IMPL_MEMBER_NOT_IMPLEMENTED	INHERITANCE_AND_CONFLICTS
    VAR_IMPLEMENTED_BY_INHERITED_VAL_ERROR	INHERITANCE_AND_CONFLICTS
    CONFLICTING_INHERITED_MEMBERS	INHERITANCE_AND_CONFLICTS
    NOT_A_SUPERTYPE	INHERITANCE_AND_CONFLICTS
    PROJECTION_IN_IMMEDIATE_ARGUMENT_TO_SUPERTYPE	INHERITANCE_AND_CONFLICTS
    CYCLIC_INHERITANCE_HIERARCHY	INHERITANCE_AND_CONFLICTS
    SUPERTYPE_IS_EXTENSION_FUNCTION_TYPE	INHERITANCE_AND_CONFLICTS
    CONFLICTING_JVM_DECLARATIONS	INHERITANCE_AND_CONFLICTS
    CONST_VAL_WITH_NON_CONST_INITIALIZER	LABELS_BODIES_CONSTRUCTORS_AND_INITIALIZATION
    CAPTURED_VAL_INITIALIZATION	CFA_INITIALIZATION
    UNINITIALIZED_ENUM_COMPANION	CFA_INITIALIZATION
    UNINITIALIZED_ENUM_ENTRY	LABELS_BODIES_CONSTRUCTORS_AND_INITIALIZATION
    ENUM_ENTRY_SHOULD_BE_INITIALIZED	LABELS_BODIES_CONSTRUCTORS_AND_INITIALIZATION
    UNRESOLVED_LABEL	?
    VAL_REASSIGNMENT_VIA_BACKING_FIELD_ERROR	LABELS_BODIES_CONSTRUCTORS_AND_INITIALIZATION
    NOT_A_LOOP_LABEL	LABELS_BODIES_CONSTRUCTORS_AND_INITIALIZATION
    NOT_A_FUNCTION_LABEL	LABELS_BODIES_CONSTRUCTORS_AND_INITIALIZATION
    SUPERTYPE_INITIALIZED_IN_INTERFACE	LABELS_BODIES_CONSTRUCTORS_AND_INITIALIZATION
    PRIMARY_CONSTRUCTOR_REQUIRED_FOR_DATA_CLASS	LABELS_BODIES_CONSTRUCTORS_AND_INITIALIZATION
    EXTERNAL_ENUM_ENTRY_WITH_BODY	--- (JS)
    PROPERTY_INITIALIZER_NO_BACKING_FIELD	LABELS_BODIES_CONSTRUCTORS_AND_INITIALIZATION
    RETURN_IN_FUNCTION_WITH_EXPRESSION_BODY	LABELS_BODIES_CONSTRUCTORS_AND_INITIALIZATION
    EQUALS_MISSING	MISSING_SOMETHING
    DELEGATE_SPECIAL_FUNCTION_MISSING	MISSING_SOMETHING
    MISSING_DEPENDENCY_CLASS	MISSING_SOMETHING
    NO_GET_METHOD	BASIC_SYNTAX
    COMPONENT_FUNCTION_MISSING	MISSING_SOMETHING
    ITERATOR_MISSING	MISSING_SOMETHING
    NO_SET_METHOD	BASIC_SYNTAX
    MISSING_EXCEPTION_IN_THROWS_ON_SUSPEND	MISSING_SOMETHING
    EXPECTED_DECLARATION_WITH_BODY	MPP
    EXPECTED_ENUM_ENTRY_WITH_BODY	MPP
    SUPERTYPE_INITIALIZED_IN_EXPECTED_CLASS	MPP
    EXPECTED_ENUM_CONSTRUCTOR	MPP
    EXPECTED_CLASS_CONSTRUCTOR_PROPERTY_PARAMETER	MPP
    ACTUAL_CLASSIFIER_MUST_HAVE_THE_SAME_MEMBERS_AS_NON_FINAL_EXPECT_CLASSIFIER	MPP
    NO_ACTUAL_FOR_EXPECT	MPP
    NON_ACTUAL_MEMBER_DECLARED_IN_EXPECT_NON_FINAL_CLASSIFIER_ACTUALIZATION	MPP
    ACTUAL_MISSING	MPP
    ACTUAL_CLASSIFIER_MUST_HAVE_THE_SAME_SUPERTYPES_AS_NON_FINAL_EXPECT_CLASSIFIER	MPP
    ACTUAL_WITHOUT_EXPECT	MPP
    RETURN_TYPE_CHANGED_IN_NON_FINAL_EXPECT_CLASSIFIER_ACTUALIZATION	MPP
    MODALITY_CHANGED_IN_NON_FINAL_EXPECT_CLASSIFIER_ACTUALIZATION	MPP
    AMBIGUOUS_ACTUALS	MPP
    ACTUAL_ANNOTATION_CONFLICTING_DEFAULT_ARGUMENT_VALUE	MPP
    VISIBILITY_CHANGED_IN_NON_FINAL_EXPECT_CLASSIFIER_ACTUALIZATION	MPP
    NO_ACTUAL_CLASS_MEMBER_FOR_EXPECTED_CLASS	MPP
    IMPLEMENTATION_BY_DELEGATION_IN_EXPECT_CLASS	MPP
    SETTER_VISIBILITY_CHANGED_IN_NON_FINAL_EXPECT_CLASSIFIER_ACTUALIZATION	MPP
    LATEINIT_CHANGED_IN_NON_FINAL_EXPECT_CLASSIFIER_ACTUALIZATION	MPP
    PARAMETER_NAME_CHANGED_IN_NON_FINAL_EXPECT_CLASSIFIER_ACTUALIZATION	MPP
    TYPE_PARAMETER_NAMES_CHANGED_IN_NON_FINAL_EXPECT_CLASSIFIER_ACTUALIZATION	MPP
    PROPERTY_KIND_CHANGED_IN_NON_FINAL_EXPECT_CLASSIFIER_ACTUALIZATION	MPP
    DELEGATE_SPECIAL_FUNCTION_NONE_APPLICABLE	RESOLUTION_AND_INFERENCE
    INFERRED_TYPE_VARIABLE_INTO_EMPTY_INTERSECTION_ERROR	RESOLUTION_AND_INFERENCE
    AMBIGUOUS_ANONYMOUS_TYPE_INFERRED	BASIC_SYNTAX
    INAPPLICABLE_TARGET_ON_PROPERTY	RESOLUTION_AND_INFERENCE
    INFERENCE_UNSUCCESSFUL_FORK	RESOLUTION_AND_INFERENCE
    AMBIGUOUS_ANNOTATION_ARGUMENT	RESOLUTION_AND_INFERENCE
    PLUGIN_ANNOTATION_AMBIGUITY	RESOLUTION_AND_INFERENCE
    TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR	RESOLUTION_AND_INFERENCE
    ASSIGN_OPERATOR_AMBIGUITY	RESOLUTION_AND_INFERENCE
    UPPER_BOUND_VIOLATED	TYPES
    TYPECHECKER_HAS_RUN_INTO_RECURSIVE_PROBLEM	TYPES
    TYPE_VARIANCE_CONFLICT_ERROR	TYPES
    COMPONENT_FUNCTION_RETURN_TYPE_MISMATCH	TYPES
    REIFIED_TYPE_FORBIDDEN_SUBSTITUTION	TYPES
    RETURN_TYPE_MISMATCH_ON_OVERRIDE	TYPES
    PARCELER_TYPE_INCOMPATIBLE	TYPES
    NULLABLE_TYPE_IN_CLASS_LITERAL_LHS	BASIC_SYNTAX
    FORBIDDEN_VARARG_PARAMETER_TYPE	FORBIDDEN
    KCLASS_WITH_NULLABLE_TYPE_PARAMETER_IN_SIGNATURE	FORBIDDEN
    INCORRECT_LEFT_COMPONENT_OF_INTERSECTION	FORBIDDEN
""".trimIndent()

private val newGroupMapping = rawTableData.split("\n").associate {
    val (diagnostic, group) = it.split("\t")
    diagnostic to group
}

object IssueGroupsHelpers {
    @Test
    fun updateGroupsFromTable() {
        diagnosticToSmallClass.mapValues { (diagnostic, smallClass) ->
            when {
                diagnostic !in newGroupMapping || newGroupMapping[diagnostic] == smallClass.group -> smallClass.group
                newGroupMapping[diagnostic] == "?" -> "UNKNOWN"
                else -> newGroupMapping[diagnostic]
            }
        }.entries.joinToString("\n") { (diagnostic, group) ->
            "\t\"$diagnostic\" to $group,"
        }.let(::println)
    }

    @Test
    fun listUsedClasses() {
        println(newGroupMapping.values.toSet().joinToString("\n") { "- $it" })
    }
}